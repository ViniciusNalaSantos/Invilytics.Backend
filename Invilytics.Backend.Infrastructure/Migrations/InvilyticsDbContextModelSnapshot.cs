// <auto-generated />
using System;
using Invilytics.Backend.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Invilytics.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(InvilyticsDbContext))]
    partial class InvilyticsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Dividends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiveTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.InvestmentSectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("InvestmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("INVESTMENT_TYPE_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("INVESTMENT_SECTORS", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.InvestmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("INVESTMENT_TYPES", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Portfolios", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal>("ValueInvested")
                        .HasPrecision(19, 6)
                        .HasColumnType("decimal(19,6)")
                        .HasColumnName("VALUE_INVESTED");

                    b.HasKey("UserId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("PORTFOLIOS", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Purchases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 6)
                        .HasColumnType("decimal(19,6)")
                        .HasColumnName("PRICE");

                    b.Property<DateTime>("PurchaseTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("PURCHASE_TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("PURCHASES", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 6)
                        .HasColumnType("decimal(19,6)")
                        .HasColumnName("PRICE");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<DateTime>("SaleTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("SALE_TIMESTAMP");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("SALES", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.StockQuotesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 6)
                        .HasColumnType("decimal(19,6)")
                        .HasColumnName("PRICE");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("STOCK_QUOTES_HISTORY", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Stocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("InvestmentSectorId")
                        .HasColumnType("int")
                        .HasColumnName("INVESTMENT_SECTOR_ID");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("SYMBOL");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentSectorId");

                    b.HasIndex("UserId");

                    b.ToTable("STOCKS", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Dividends", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.Stocks", "Stock")
                        .WithMany("Dividends")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("Dividends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.InvestmentSectors", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.InvestmentTypes", "InvestmentTypes")
                        .WithMany("InvestmentSectors")
                        .HasForeignKey("InvestmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("InvestmentSectors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestmentTypes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.InvestmentTypes", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("InvestmentTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Portfolios", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.Stocks", "Stock")
                        .WithMany("Portfolios")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("Portfolios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Purchases", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.Stocks", "Stock")
                        .WithMany("Purchases")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Sales", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.Stocks", "Stock")
                        .WithMany("Sales")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.StockQuotesHistory", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.Stocks", "Stock")
                        .WithMany("StockQuotesHistory")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("StockQuotesHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Stocks", b =>
                {
                    b.HasOne("Invilytics.Backend.Domain.Entities.InvestmentSectors", "InvestmentSector")
                        .WithMany("Stocks")
                        .HasForeignKey("InvestmentSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invilytics.Backend.Domain.Entities.Users", "User")
                        .WithMany("Stocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestmentSector");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.InvestmentSectors", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.InvestmentTypes", b =>
                {
                    b.Navigation("InvestmentSectors");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Stocks", b =>
                {
                    b.Navigation("Dividends");

                    b.Navigation("Portfolios");

                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("StockQuotesHistory");
                });

            modelBuilder.Entity("Invilytics.Backend.Domain.Entities.Users", b =>
                {
                    b.Navigation("Dividends");

                    b.Navigation("InvestmentSectors");

                    b.Navigation("InvestmentTypes");

                    b.Navigation("Portfolios");

                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("StockQuotesHistories");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
